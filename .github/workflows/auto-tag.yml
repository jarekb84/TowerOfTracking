name: Auto Tag on Merge to Main

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_tag
        run: |
          # Get the latest tag, or use 0.0.0 if no tags exist
          LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Parse version and determine bump
        id: parse_version
        run: |
          TAG="${{ steps.get_tag.outputs.latest_tag }}"
          # Remove 'v' prefix
          VERSION="${TAG#v}"

          # Validate and split version into parts
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Invalid version format '$VERSION'. Expected format: X.Y.Z"
            exit 1
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Validate numeric segments
          if ! [[ "$MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]] || ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
            echo "Error: Version segments must be numeric. Got MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
            exit 1
          fi

          # Get commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Determine version bump based on commit message
          # Major bump ONLY if first line starts with: [major], [MAJOR], major, MAJOR, BREAKING CHANGE:, or BREAKING:
          # Extract first line to prevent "BREAKING CHANGE:" appearing mid-message from triggering major bump
          FIRST_LINE=$(echo "$COMMIT_MSG" | head -n 1)
          if echo "$FIRST_LINE" | grep -qiE '^\[major\]|^major\b|^BREAKING CHANGE:|^BREAKING:'; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            BUMP_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -qiE '\[minor\]|^minor\b'; then
            MINOR=$((MINOR + 1))
            PATCH=0
            BUMP_TYPE="minor"
          else
            # Default to patch bump
            PATCH=$((PATCH + 1))
            BUMP_TYPE="patch"
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION (bump type: $BUMP_TYPE)"

      - name: Create and push tag
        env:
          # Use PAT to trigger deploy workflow (default GITHUB_TOKEN doesn't trigger workflows)
          # PAT must have Workflows: Read and write permission
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          # Verify PAT is set (will show empty if missing, but won't expose the token)
          if [ -z "$GITHUB_TOKEN" ]; then
            echo "ERROR: PAT_TOKEN secret is not set. Deploy workflow will not trigger."
            echo "Please set PAT_TOKEN in repository secrets with Workflows: Read and write permission."
            exit 1
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.parse_version.outputs.new_tag }}" -m "Auto-tagged version ${{ steps.parse_version.outputs.new_version }} (${{ steps.parse_version.outputs.bump_type }} bump)"
          # Push using PAT to trigger the deploy workflow
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git "${{ steps.parse_version.outputs.new_tag }}"
          echo "Created and pushed tag: ${{ steps.parse_version.outputs.new_tag }}"
